/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>

#include <kern/picirq.h>


###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 * balvisio: To find out if the TRAP returns an error code or not we look at Section
 * 9.10 of the 80386 Programmer's Reference Manual. See notes.
 */

//The numbers for the traps are defined in trap.h
TRAPHANDLER_NOEC(handler_T_DIVIDE, T_DIVIDE)	// divide error
TRAPHANDLER_NOEC(handler_T_DEBUG, T_DEBUG)	// debug exception
TRAPHANDLER_NOEC(handler_T_NMI, T_NMI)	// non-maskable interrupt
TRAPHANDLER_NOEC(handler_T_BRKPT, T_BRKPT)	// breakpoint
TRAPHANDLER_NOEC(handler_T_OFLOW, T_OFLOW)	// overflow
TRAPHANDLER_NOEC(handler_T_BOUND, T_BOUND)	// bounds check
TRAPHANDLER_NOEC(handler_T_ILLOP, T_ILLOP)	// illegal opcode
TRAPHANDLER_NOEC(handler_T_DEVICE, T_DEVICE)	// device not available
TRAPHANDLER(handler_T_DBLFLT, T_DBLFLT)		// double fault
/* #define T_COPROC  9 */	// reserved (not generated by recent processors)
TRAPHANDLER(handler_T_TSS, T_TSS)		// invalid task switch segment
TRAPHANDLER(handler_T_SEGNP, T_SEGNP)  		// segment not present
TRAPHANDLER(handler_T_STACK, T_STACK)		// stack exception
TRAPHANDLER(handler_T_GPFLT, T_GPFLT)		// general protection fault
TRAPHANDLER(handler_T_PGFLT, T_PGFLT)		// page fault
/* #define T_RES    15 */	// reserved
TRAPHANDLER_NOEC(handler_T_FPERR, T_FPERR)	// floating point error
TRAPHANDLER(handler_T_ALIGN, T_ALIGN)		// aligment check
TRAPHANDLER_NOEC(handler_T_MCHK, T_MCHK)		// machine check
TRAPHANDLER_NOEC(handler_T_SIMDERR, T_SIMDERR)	


//balvisio: Added trap handler for system call interrupt
TRAPHANDLER_NOEC(handler_T_SYSCALL, T_SYSCALL);

TRAPHANDLER_NOEC(handler_IRQ_TIMER, IRQ_OFFSET + IRQ_TIMER);
TRAPHANDLER_NOEC(handler_IRQ_KBD, IRQ_OFFSET + IRQ_KBD);
TRAPHANDLER_NOEC(handler_IRQ_SERIAL, IRQ_OFFSET + IRQ_SERIAL);
TRAPHANDLER_NOEC(handler_IRQ_SPURIOUS, IRQ_OFFSET + IRQ_SPURIOUS);
TRAPHANDLER_NOEC(handler_IRQ_IDE, IRQ_OFFSET + IRQ_IDE);
TRAPHANDLER_NOEC(handler_IRQ_ERROR, IRQ_OFFSET + IRQ_ERROR);


_alltraps:
	
	/*balvisio: Push remaining fields of the TrapFrame struct
	* The macro TRAPHANDLER also takes care of pushing
	* the trap number into the stack so the only fields remaining
	* that we need to take care of are %ds %es
	*/

	pushw $0x0
	pushw %ds
	pushw $0x0
	pushw %es

	//Push All the Registers for the struct
	//PushRegs inside TrapFrame
	pushal

	/*balvisio: load GD_KD into %ds and %es
	%DS: Holds the Data segment that your program accesses.
       Changing its value might give erronous data.

	%ES: These are extra segment registers available for
   	far pointer addressing like video memory and such.
	*/
	movw $GD_KD, %ax
	movw %ax, %ds
	movw $GD_KD, %ax
	movw %ax, %es

	pushl %esp

	call trap
